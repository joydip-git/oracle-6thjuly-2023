1. difference between where and having clause
   a. where clause is used to filter the records from the table based on the specified condition. Having clause is used to filter records from groups (created by GROUP BY clause) based on the spcified condition.
   b. Where clause can be used without group by clause. Having clause can't be used without group by clause.
   c. where clause can't contain any aggregate function. Having clause can contain aggregate function.
   d. where clause can be used with select, update and delete statements. Having clause is used only with select statement.

2. PL/SQL:
	Procedural Language extensions for the Structured Query Language (PL/SQL).
	SQL: It's a database language both for querying and updating data in the RDBMS.
	PL/SQL adds many programming constructs to the SQL. It helps to overcome the limitations of SQL. It is very well readable.
	PL/SQL is an embeded language. It is part of Oracle database. It can't be used like any other stand-alone programming language like python, c, c++, c#, Java etc. It can be executed in a system where Oracle database is installed.

	architecture:
	a. when you try to execute the PL/SQL block, behind the scene an engine, named, PL/SQL engine takes care of compilation and execution of the PL/SQL block, in  collaboration with SQL engine. the PL part of the PL/SQL is compiled by Procedural Statement Executor of PL/SQL engine and the SQL part of the PL/SQL is compiled and executed by SQL statement executor. the PL/SQL engine converts the actual code into byte code and then that code gets executed.
   
	Sections in PL/SQL block:
		a. declaration section
		b. Executable section
		c. Exception-Handling section
   	Blocks:
		a. anonymous block: can't be saved in database as database object. 
		b. named block: stored procedure, triggers, functions etc. are named pl/sql blocks. they can be saved in database as database objects.

	data types in pl/sql:
	 - scalar type: single value:
		number, boolean, character, datetime
	 - composite type: multiple values (record, collection etc.)	

	Numeric data types:
		real numbers, integers and floating point numbers [NUMBER, BINARY_FLOAT, BINARY_DOUBLE => sql data types and PLS_INTEGER => pl/sql data type]
		PLS_INTEGER => pl/sql data type (32 bit integer)

		NUMBER => s/w arithmatic
		PLS_INTEGER => h/w arithmatic, faster compared to NUMBER
			- NATURAL (nonnegative) , NATURALN (nonnegative with NOT NULL CONSTRAINT), POSITIVE (positive), POSITIVEN (positive with NOT NULL CONSTRAINT), SIGNTYPE (-1,0,1), SIMPLE_INTEGER (PLS_INTEGER with NOT NULL CONSTRAINT)

	Boolean: TRUE, FALSE, NULL.
	used in case of IF..THEN, CASE, LOOP, FOR LOOP, WHILE LOOP control flow structure
	should not/can't:
	 - assign a boolean value to a table column
	 - select the value from a table column into a boolean value
	 - use a boolean in a SQL function
	 - use boolean expression in SQL statement
	 - use boolean value in DBMS_OUTPUT.put_line() and DBMS_OUTPUT.put()


	character:
	alphanumeric text.
	sql data types that are used in PL/SQL: char, varchar2, long, raw, long raw, rowid, urowid
	char(n): fixed-length character data type (1-32767 bytes)
	varchar2(n): varying length character data (1-32767 bytes)

	datetime:
	date, timestamp, .....
	
	DATA TYPE		SYNONYMS
	NUMBER  => DEC, DECIMAL, DOUBLE PRECISION, FLOAT, INTEGER, INT, NUMERIC, REAL, SMALLINT
	CHAR 	=> CHARACTER, STRING
	VARCHAR2 => VARCHAR


Variable declaration in PL/SQL:
	syntax:
	variable_name datatype [NOT NULL] [:= initial_value]

	local variable: l_****
	global variable: g_****

	l_emp_name varchar2(50) not null :='NA'

	declare
		l_first_val number := 10;
		l_second_val number;
	begin
		l_second_val := l_first_val;
	end

	constants:
	constant_name CONSTANT data-type [not null] :=expression;

	declare
		co_savings_acc_interest CONSTANT FLOAT := 7.5;
		co_circle_pi_value CONSTANT REAL :=3.14;
		co_circle_radius CONSTANT REAL :=12;
		co_circle_area CONSTNAT REAL:= (co_circle_radius * co_circle_pi_value**2);

	control flow structures:
	a. IF
		 - IF THEN
		 - IF THEN ELSE
		 - IF THEN ELSIF
		 - nested IF

a. IF THEN
	IF condition THEN
		statements;
	END IF;

b. IF THEN ELSE
	IF condition THEN
		statements;
	ELSE
		else_statements;
	END IF;

	
c. IF THEN ELSIF
	IF condition THEN
		statements;
	ELSIF
		else_statements;
	ELSIF
		else_statements;
	
	END IF;
d. Nested IF:
	IF first_condition THEN
		IF second_condition THEN
			nested_if_statements;
		ELSE
			else_statements;
		END IF;
	ELSE
		else_statements;
	END IF;

	b. CASE statement:
		- simple CASE: when you want to execute a sequence of statements based on the result of single expression
		- searched CASE: when you want to execute a sequence of statements based on the results of multiple boolean expressions

	CASE selector
	WHEN SELECTOR_VALUE_1 THEN
		STATEMENT_1
	WHEN SELECTOR_VALUE_2 THEN
		STATEMENT_2
	..........................
	ELSE
		ELSE_STATEMENT
	END CASE;

	If none of the selector_values match CASE_NOT_FOUND exception

	c. GOTO statement:
	GOTO label_name;

	<<label_name>>
	Note:
	**: GOTO should not be used to transfer control to IF, CASE or LOOP statements
	**: GOTO should not be used to transfer control from one clause to another in the IF
		from one IF clause to ELSIF or ELSE
		from one WHEN to aniother WHEN in the CASE statement
	**: GOTO should not be used to transfer control out of a subprogram (stored procedure, function, trigger etc.) or into an exception handler
	**: GOTO should not be used to transfer control from exception section back to current block.
	

	d. LOOP statement:
	<<label>> LOOP
		statements;
	END LOOP loop_label;

	use EXIT or EXIT WHEN to terminate the loop

	LOOP
		IF condition THEN
			EXIT;
		END IF;
	END IF;

	d.i. FOR loop:
	FOR index IN lower_bound .. upper_bound
	LOOP
		statements;
	END LOOP;

	index value can't be changed. it is initially set to lower-bound and loop execution starts. next time onwards, the index value is compared with upper_bound and if the condition is true, index value is incremented by 1. when the index value becomes greater than upper_bound, the loop exits.
	lower_bound and upper_bound => evaluated even before the loop execution starts (ONLY ONCE), they are of type PLS_INTEGER (temporary). if yoiu change the values of lower_bound and upper_bound in the loop statments, they will not effective.

	e. WHILE loop:
	WHILE condition
	LOOP
		statements;
	END LOOP;

	f. CONTINUE statement:
	CONTINUE WHEN condition;
	=> IF condition THEN
		CONTINUE;

	SELECT-INTO:
	a. column-level
	declare
		l_var_name table_name.column_name%TYPE;
	begin
		select column_name into l_var_name from table_name where table_pk_value = value;
	end;
	
	b. record-level:
	b.i. table-based record
	declare
		l_record_name table_name%ROWTYPE;
	begin
		select * into l_record_name from table_name where table_pk_value = value;
	end;
	
	%ROWTYPE => attribute

	b.ii. cursor-based record:
	declare
		cursor cursor-name is
		select * from table_name;
		l_record_name cursor_name%ROWTYPE;
	begin
		open cursor-name;
		loop
		fetch cursor-name into l_record_name;
		//operations
		end loop;
		close cursor-name;
	end;

	b.iii. user-defined/programmer-defined record:
	declare
		TYPE r_table_row
		IS
			RECORD
			(
				first_column_prop table_name.col_1%TYPE,
				second_column_prop table_name.col_2%TYPE,
				third_column_prop table_name%TYPE,
			);
		l_record r_table_row;
		cursor c_record is
		select col_1, col_2, col_3 from table_name where table_pk = value;
	begin
		--select col_1, col_2, col_3 into l_record from table_name where table_pk = value;
		open c_record;
		loop
			fetch c_record into l_record;
			exit when c_record%notfound;
			dbms_output.put_line(l_record.first_column_prop);
		end loop;
		close c_record;
	end;


	class A { string first; int second; float third;}
	A obj;




	
cursor with parameter:
cursor c (start_id NUMBER, end_id NUMBER) is
select * from products where product_id between start_id and end_id

OPEN c(1,100);

