Array in Java:
-------------------------
int[] numbers = new int[3];
int []numbers=new int[3];
int numbers[] = new int[3];

//Array numbers = new Array(3);

class IntArray{
	int first, second, third;
}

Other OOP concepts:
inheritance
	 - multiple inheritance of class

//not possible
class B{ public void foo(){} public void foo1(){}}
class C{ public void foo(){} public void foo2(){}}

class A extends B, C{
public void foo3(){}
}

A obj = new A();
obj.foo();
a => b=> c

interface B{ void foo(); void foo1();}
interface C{ void foo(); void foo2();}

class A implements B, C{
	public void foo(){}
	public void foo1(){}
	public void foo2(){}
	public void foo3(){}
}

A obj = new A();
obj.foo();


S=> Single Responsibility
O => Open close principle
SOLID => 


printer => laser and deskjet => homedeskjet and officedeskjet

polymorphism:
	compile time (overloading): 
		method overloading, 
		operator overloading
	
	runtime/dynamic (override): methods

operators: operator overloading
10 + 20 => 30
"sunil" + "kumar" => sunil kumar

String str1 = "sunil";
String str2 = "Kumar";
str1.concat(str2);

final keyword:
	a. class: the class can't be derived
	b. method: can be used with overriden method. this method can't be overriden in further child classes
	c. data member: the value of the data member has to be assigned during the declaration and that value can't altered
	d. local variable of method: the value of the local variable has to be assigned during the declaration and that value can't altered

method with same name in a class:
	either method must have different number of arguments
	or method must have different data typed arguments
	or method must have different positioned arguments

compile time polymorphism:
method overloading:
class Addition{
	public void add(int a, int b){}
	public void add(int a, int b, int c){}
	public void add(int a, int b, float l){}
	public void add(int a, float l,int b){}
}

Addition addition = new Addition();
addition.add(12,13);
addition.add(12,13,14);
addition.add(12,13,14.5);
addition.add(12,13.5,14);

class A { 
	public void foo(String name){}
}
class B extends A{ 
	@Override 
	public void foo(String name){}
}
class C extends A { 
	@Override 
	public void foo(String name){}
}

A obj = new B()/C();
obj.foo();

dynamic polymorphism:
base =>  virtual
child => override

base method is not abstract => might or might not override in child class

base method is not abstract => must override in child class

abstract class:
	a class 
	- which has at least one abstract method or 
	- it has inherited abstract method(s) and did not implement
	an abstract can have non-abstract methods, getter-setter(s), data members, constructors
	you can't create an instance of an abstract class
	an abstract member (method or getter-setter) must be declared with abstract keyword as well as the class must be declared with abstract keyword

child class inheriting from abstract base class:
	you must implement (override) all abstract members of the base class here
	if you don't, then the child class becomes abstract and you have to declare the class with abstract keyword

interface:      collection of abstract methods and static data
		here the memthods are by default abstract and public
		here the static members are by default static and public as well as they have to be initialzed with a value which can't be altered in the implementing class. i.e. the static data are by default final in interface.
		you can't create instance of an interface
		you can't write
			- explicit constructor
			- non-abstract methods/getter-setters
			- default constructor
			- instance members

child class implementing interface:
		all abstract members are supposed to be implemented
		if you don't, then the child class becomes abstract and you have to declare the class with abstract keyword and declare the method inside the class again with public and abstract keyword

interface: 
	










