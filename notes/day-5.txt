anonymous block:

<<outer>>
declare
 l_x number;
begin
	for l_x in 1..10
	loop
		outer.l_x + l_x
	end loop;
end;

named PL/SQL block => subprograms
stored procedure
trigger
user defined function

functions - built-in (max(), min(), avg(), nvl()) and user-defined

1. stored procedure:

create view view_name is
select * from products;

create [or replace] procedure procedure_name ([parameter_list])
is
 [declaration statement]
begin
	
	[execution statement]
	exception
	[exception-handler]
end [procedure_name];

create [or replace] procedure procedure_name (IN param1 data-type, OUT param2 data-type, INOUT param3 data-type)
is
 [declaration statement]
begin
	[execution statement]
	exception
	[exception-handler]
end [procedure_name];


execute procedure_name(10, 20,....);

replace 

removing sp: drop procedure procedure-name;

cursor variable:
it is a variable that references to a cursor

this is used to create a cusror variable which is not tied up to any particular query
explicit or implcit type cursors are always associated with/tied up with a query.


sp vs function:
1. sp can have any DML queries but function can have only select query (ie. transaction can't be written inside function, but only inside sp)
2. you can't call sp from a function, but you can call any function from a sp
3. functions can be called from select query, but sp can't be called from a select query
4. sp has no return type, function has return type
5. to return value from sp, use OUT parameter or cursor for result set, to reurn value from a function you don't need any out parameter (simply retun by using return statement) or a cusror for result set



select count(*) from products


select * from getStatistics()

triggers:
--before|after|instead of => when the trigger will be executed
-- insert|delete|update => the DML operation
-- of col_name => col_name to be updated
-- on table_name => name of the table linked with the trigger





