----cursor with column-level
SET SERVEROUTPUT ON;
DECLARE
    l_cust_name customers.name%TYPE;
    l_cust_credit_limit customers.credit_limit%TYPE;
    CURSOR c_customer IS 
    select name, credit_limit from customers where customer_id=100;
BEGIN
    OPEN c_customer;
    FETCH c_customer INTO l_cust_name, l_cust_credit_limit;
    DBMS_OUTPUT.put_line('name: '||l_cust_name||', credit limit: '||l_cust_credit_limit);
    CLOSE c_customer;
END;

--cursor with loop (column-level)
SET SERVEROUTPUT ON;
DECLARE
    l_cust_name customers.name%TYPE;
    l_cust_credit_limit customers.credit_limit%TYPE;
    CURSOR c_customer IS 
    select name, credit_limit from customers;
BEGIN
    OPEN c_customer;
    DBMS_OUTPUT.put_line('no of records '||c_customer%rowcount);
    LOOP
        FETCH c_customer INTO l_cust_name, l_cust_credit_limit;
            EXIT WHEN c_customer%notfound;
            DBMS_OUTPUT.put_line('record# '||c_customer%rowcount);
            DBMS_OUTPUT.put_line('name: '||l_cust_name||', credit limit: '||l_cust_credit_limit);
    END LOOP;
    CLOSE c_customer;
END;


--cursor with view
create or replace view cust_contact_info as
select cust.name, con.first_name, con.last_name
    from customers cust 
    left outer join contacts con
    on cust.customer_id = con.customer_id;

SET SERVEROUTPUT ON;
DECLARE
    l_cust_name customers.name%TYPE;
    l_con_fname contacts.first_name%TYPE;
    l_con_lname l_con_fname%TYPE;
    CURSOR c_customer IS 
    select name, first_name, last_name from cust_contact_info;
--    select cust.name, con.first_name, con.last_name
--    from customers cust 
--    left outer join contacts con
--    on cust.customer_id = con.customer_id;
BEGIN
    OPEN c_customer;
    DBMS_OUTPUT.put_line('no of records '||c_customer%rowcount);
    LOOP
        FETCH c_customer INTO l_cust_name, l_con_fname, l_con_lname;
            EXIT WHEN c_customer%notfound;
            DBMS_OUTPUT.put_line('record# '||c_customer%rowcount);
            IF l_con_fname is null and l_con_lname IS NULL THEN
                DBMS_OUTPUT.put_line('name: '||l_cust_name||', Full name: NA');
            ELSE 
                DBMS_OUTPUT.put_line('name: '||l_cust_name||', Full name: '||(l_con_fname || '' || l_con_lname));
            END IF;
    END LOOP;
    CLOSE c_customer;
END;

--cursor with loop and record type
SET SERVEROUTPUT ON;
DECLARE 
CURSOR c_product IS
SELECT product_name, list_price
FROM products
ORDER BY
list_price DESC;
l_product c_product%ROWTYPE;
BEGIN
    OPEN c_product;
    
    LOOP
       FETCH c_product INTO l_product;
       EXIT WHEN c_product%notfound;
       DBMS_OUTPUT.put_line(l_product.product_name||', '||l_product.list_price);
    END LOOP;
    CLOSE c_product;
END;

--cursor with for loop (record-based)
SET SERVEROUTPUT ON;
DECLARE 
CURSOR c_product IS
SELECT product_name, list_price
FROM products
ORDER BY
list_price DESC;
BEGIN
        
    FOR l_product IN c_product
    LOOP
        DBMS_OUTPUT.put_line(l_product.product_name||', '||l_product.list_price);
    END LOOP;    
    
END;

--cursor accepting parameter
SET SERVEROUTPUT ON;
DECLARE 
--CURSOR c_product(low_price NUMBER, high_price NUMBER) IS
CURSOR c_product(low_price NUMBER :=0, high_price NUMBER :=100) IS
SELECT product_name, list_price
FROM products
where list_price between low_price and high_price
ORDER BY
list_price DESC;
l_product c_product%ROWTYPE;
BEGIN
    --OPEN c_product(50,100);
    OPEN c_product;
    DBMS_OUTPUT.put_line('Mass products');
    LOOP
        FETCH c_product into l_product;
        EXIT WHEN c_product%notfound;
        DBMS_OUTPUT.put_line(l_product.product_name||', '||l_product.list_price);
    END LOOP;    
    CLOSE c_product;
    
    DBMS_OUTPUT.put_line('Luxury products');
    OPEN c_product(800,1000);
    
    LOOP
        FETCH c_product into l_product;
        EXIT WHEN c_product%notfound;
        DBMS_OUTPUT.put_line(l_product.product_name||', '||l_product.list_price);
    END LOOP;    
    CLOSE c_product;
    
END;




